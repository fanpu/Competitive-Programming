#include<utility>
#include<cstdio>
#include<iostream>
#include<vector>
#define mp make_pair
#define ll long long
#define INF 2000000000

using namespace std;
typedef vector<int> vi;
typedef pair<int,int> ii;

bool comp(pair<int,ii> lhs, pair<int,ii> rhs){
     if(lhs.second.first < rhs.second.first) return true;
     else return false;
}

class UnionFind{
      private: vi p, rank;
      public:
               UnionFind(int N){
                             rank.assign(N,0); p.assign(N,0);
                             for(int i = 0; i < N; i++) p[i] = i;              
               }      
               int findSet(int i){
                   return (p[i] == i) ? i : (p[i] = findSet(p[i]));
               }
               bool isSameSet(int i, int j){
                    return findSet(i) == findSet(j);
               }
               void unionSet(int i, int j){
                    if(!isSameSet(i,j)){  
                        int x = findSet(i), y = findSet(j);
                        if(rank[x] > rank[y]) p[y] = x;
                        else{
                             p[x] = y;
                             if(rank[x] == rank[y]) rank[y]++;
                        }                                                                                              
                    }
               }
};

vector<pair<int, ii> > edgeList;

int main(){
    int v,e,q; cin >> v >> e >> q;
    int v1, v2, quality;
    for(int i = 0; i < e; i++){
            scanf("%d %d %d", &v1, &v2, &quality);
            edgeList.push_back(mp(quality,mp(v1,v2)));
    }
    sort(edgeList.begin(),edgeList.end(),greater<pair<int,ii> >());
    vector<pair<int,ii> > queries; // first: value second.first: order second.second: highest quality
    int temp;
    for(int i = 0; i < q; i++){
            scanf("%d",&temp);
            queries.push_back(mp(temp,mp(i,0)));
    }
    sort(queries.begin(),queries.end());      
    int mstCost = INF;
    UnionFind UF(v+1);
    for(int i = 0; i < e; i++){
            pair<int, ii> front = edgeList[i];
            if(!UF.isSameSet(front.second.first, front.second.second)){
                                                 mstCost = min(front.first, mstCost);
                                                 int index = lower_bound(queries.begin(),queries.end(),mp(front.second.first,mp(0,0))) - queries.begin();
                                                 if(index != queries.size() && queries[index].first == front.second.first){
                                                                         queries[index].second.second = max(queries[index].second.second,mstCost);
                                                 }
                                                 index = lower_bound(queries.begin(),queries.end(),mp(front.second.second,mp(0,0))) - queries.begin();
                                                 if(index != queries.size() && queries[index].first == front.second.second){
                                                                         queries[index].second.second = max(queries[index].second.second,mstCost);
                                                 }
                                                 UF.unionSet(front.second.first, front.second.second);
            } 
    }       
    sort(queries.begin(),queries.end(),comp);
    for(int i = 0; i < queries.size(); i++){
            cout << queries[i].second.second << "\n";
    }                                               
    system("pause"); 

}
/*

4 4 2
1 2 10
1 3 30
2 4 20
3 4 5
3
4

*/
